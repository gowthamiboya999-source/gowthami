<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>AI Expense Tracker (Frontend Only)</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-slate-50 min-h-screen p-6">

  <h1 class="text-3xl font-bold mb-6">💰 AI Expense Tracker — Frontend Only</h1>

  <!-- Chart -->
  <div class="bg-white p-4 rounded-2xl shadow mb-6">
    <h2 class="font-semibold mb-2">Spending Overview</h2>
    <canvas id="spendingChart" height="120"></canvas>
  </div>

  <!-- Grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">

    <!-- Transactions -->
    <div class="bg-white p-4 rounded-2xl shadow">
      <h3 class="font-semibold mb-2">Recent Transactions</h3>
      <div id="transactions" class="h-60 overflow-y-auto text-sm"></div>
    </div>

    <!-- Alerts -->
    <div class="bg-white p-4 rounded-2xl shadow">
      <h3 class="font-semibold mb-2">Budget Alerts</h3>
      <ul id="alerts" class="text-sm space-y-1 text-red-600"></ul>
    </div>
  </div>

  <script>
    // ---- Sample Transactions ----
    const transactions = [
      { date: "2025-01-05", description: "Starbucks", amount: 5.75 },
      { date: "2025-01-08", description: "Amazon Marketplace", amount: 42.99 },
      { date: "2025-01-15", description: "Rent Payment", amount: 1200 },
      { date: "2025-02-02", description: "Grocery - Whole Foods", amount: 87.3 },
    ];

    const budgets = { Groceries: 400, EatingOut: 100, Shopping: 300, Rent: 1200 };

    // ---- Categorization ----
    function categorize(desc) {
      const d = desc.toLowerCase();
      if (d.includes("starbucks")) return "EatingOut";
      if (d.includes("grocery")) return "Groceries";
      if (d.includes("rent")) return "Rent";
      if (d.includes("amazon")) return "Shopping";
      return "Other";
    }

    // Add categories
    transactions.forEach(t => t.category = categorize(t.description));

    // ---- Render Transactions ----
    const txDiv = document.getElementById("transactions");
    txDiv.innerHTML = transactions.slice().reverse().map(t => `
      <div class="flex justify-between border-b py-2">
        <div>
          <div class="font-medium">${t.description}</div>
          <div class="text-xs text-slate-500">${t.date} • ${t.category}</div>
        </div>
        <div>$${t.amount.toFixed(2)}</div>
      </div>
    `).join("");

    // ---- Alerts ----
    const alerts = [];
    Object.entries(budgets).forEach(([cat, limit]) => {
      const spent = transactions.filter(t => t.category === cat)
        .reduce((a,b) => a+b.amount, 0);
      if (spent >= limit) alerts.push(`⚠️ ${cat} budget exceeded (${spent}/${limit})`);
      else if (spent >= limit*0.8) alerts.push(`⚠️ ${cat} nearing budget (${spent}/${limit})`);
    });
    document.getElementById("alerts").innerHTML =
      alerts.length ? alerts.map(a => `<li>${a}</li>`).join("") :
      `<li class="text-slate-500">No alerts 🚀</li>`;

    // ---- Spending Chart ----
    function monthKey(dateStr) {
      const d = new Date(dateStr);
      return `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,"0")}`;
    }
    const monthly = {};
    transactions.forEach(t => {
      const m = monthKey(t.date);
      monthly[m] = (monthly[m]||0)+t.amount;
    });
    const labels = Object.keys(monthly);
    const data = Object.values(monthly);

    new Chart(document.getElementById("spendingChart"), {
      type: "line",
      data: {
        labels,
        datasets: [{
          label: "Total Spending",
          data,
          borderColor: "#4F46E5",
          tension: 0.3,
          fill: false
        }]
      },
      options: {
        responsive: true,
        plugins: { legend: { display: false } }
      }
    });
  </script>
</body>
</html>
